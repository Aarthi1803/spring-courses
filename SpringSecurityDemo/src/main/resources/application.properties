spring.application.name=SpringSecurityDemo

spring.security.user.name=telusko
spring.security.user.password=1234

server.servlet.session.cookie.same-site=strict

#spring.datasource.url=jdbc:mysql://localhost:3306/spring_security
spring.datasource.url=jdbc:mysql://localhost:3306/jwt
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
# server.servlet.session.cookie.same-site=strict : 

# What is SameSite in Cookies?
#
# The SameSite attribute in cookies controls when a cookie is sent with cross-site requests.
# There are three possible values:
#
#    SameSite=Strict (Most secure)
#    SameSite=Lax (Moderate security)
#    SameSite=None (Least secure, allows third-party cookies)
#
# What Happens with SameSite=Strict?
#
#    Cookies are sent only for requests from the same site.
#    Cookies are NOT sent with external (cross-origin) requests.
#    This prevents Cross-Site Request Forgery (CSRF) attacks.

# Scenario 1: Banking Website (High Security)
# Imagine you are logged into BankingApp.com.
#
# 1. Without SameSite=Strict:
#
#    You are logged into BankingApp.com.
#    You visit MaliciousSite.com in another tab.
#    MaliciousSite.com secretly makes a request to https://BankingApp.com/transferMoney?amount=10000.
#    Since your browser automatically includes session cookies, the request succeeds, and your money is stolen.
#
# 2. With SameSite=Strict:
#
#    The session cookies are NOT sent because the request comes from a different site (MaliciousSite.com).
#    The request fails, protecting your session.

# Scenario 2: Social Media Site (User Convenience)
# Imagine you are logged into SocialApp.com and you see a post on NewsSite.com with a "Like" button.
#
# 1. With SameSite=Strict
#
#    Clicking "Like" on NewsSite.com won't work because the session cookie is not sent.
#    You would be forced to log in again on NewsSite.com to like the post.
#
# 2. With SameSite=Lax or SameSite=None
#
#    Your session cookie is sent, and the "Like" request works.

#    server.servlet.session.cookie.same-site=strict ensures that cookies are not shared with requests from other websites.
#    Prevents CSRF attacks by blocking unauthorized requests.
#    Best for high-security applications like banking, e-commerce, and government sites.
#    Not ideal for social media or third-party integrations where users interact across multiple domains.
#
# 	 Use SameSite=Strict when security is more important than user convenience.