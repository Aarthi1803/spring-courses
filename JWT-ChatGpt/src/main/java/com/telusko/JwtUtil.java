package com.telusko;

import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;
import org.springframework.stereotype.Component;
import java.security.Key; // Helps generate a secure key.
import java.util.Date; // Used for setting JWT expiration time.

@Component // Marks this class as a Spring Bean (so we can use @Autowired).
public class JwtUtil { // This class will generate, validate, and extract data from JWTs.
	
	// Define Constants for JWT (Secret Key & Expiry Time)
    private final String SECRET_KEY = "MySecretKeyForJWTGenerationMySecretKeyForJWTGeneration"; // 256-bit key - A secret key used to sign JWTs.
    private final long EXPIRATION_TIME = 1000 * 60 * 60; //  Token will expire after 1 hour.

    //  Generate a Secure Signing Key
    private Key getSigningKey() { // Converts SECRET_KEY into a cryptographic key for signing JWTs. Ensures token security and prevents easy guessing. Converts string key into a secure format
        return Keys.hmacShaKeyFor(SECRET_KEY.getBytes());  
    }

    // Generate JWT Token
    public String generateToken(String username) { // Generates a JWT with username & expiry time.
        return Jwts.builder()
                .setSubject(username) // Stores the username inside the JWT.
                .setIssuedAt(new Date()) // Marks the time when JWT was created.
                .setExpiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME)) // Sets expiration time for the token (current time + 1 hour).
                .signWith(getSigningKey(), SignatureAlgorithm.HS256) // Secure the token - Signs the JWT with our secret key.
                .compact(); // Generates the final JWT string.
    }

    // Validate JWT Token
    public boolean validateToken(String token) { // Uses the SECRET_KEY to check if the token is valid. If the token is modified or expired, it returns false.
        try {
            Jwts.parserBuilder()
                .setSigningKey(getSigningKey())
                .build()
                .parseClaimsJws(token);
            return true; // Valid token
        } catch (Exception e) {
            return false; // Invalid token
        }
    }

    // Extract Username from JWT Token
    public String extractUsername(String token) { // Extracts username stored inside JWT.
        return Jwts.parserBuilder()
        		   .setSigningKey(getSigningKey())
        		   .build()
                   .parseClaimsJws(token)
                   .getBody().getSubject();
    }
    
}


/*

What is JWT?
JSON Web Token (JWT) is a secure and compact way to transmit information between two parties (Client & Server). It is mainly used for authentication and authorization in APIs.

How JWT Works?
    User logs in ‚Üí Sends username & password to the server.
    Server validates user ‚Üí If valid, it creates a JWT token and sends it to the user.
    User stores JWT ‚Üí In local storage or as a cookie.
    User sends JWT in requests ‚Üí Server validates JWT and grants access.

Example: Online Banking App:
    Login: A user enters their credentials.
    JWT is issued: The server sends a token to the user.
    User makes API requests: (e.g., check balance, transfer money) by attaching JWT.
    Server verifies JWT: If valid, access is granted. If expired or tampered, access is denied.

JWT Structure:
A JWT token looks like this:

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
.
eyJ1c2VySWQiOjEsInJvbGUiOiJBRE1JTiJ9
.
dVNd1m3jJvgL0ZpGxTtwN2tuYY2sdFV6hAvRxC5XUwU

It consists of three parts:
    Header (Metadata) ‚Üí Contains algorithm & token type.
    Payload (Data/Claims) ‚Üí Stores user info like ID, Role, Expiry.
    Signature (Security) ‚Üí Ensures the token was not altered.

JWT Implementation in Java (Spring Boot)
We will create:
    JWT Utility Class ‚Üí For generating & validating JWTs.
    Authentication Controller ‚Üí To issue JWTs on login.
    Security Configuration ‚Üí To secure API endpoints.

JWT vs. Session-Based Authentication:
Feature			JWT (Token-Based)						Session-Based
Storage			Stored on client						Stored on server
Scalability		More scalable							Less scalable
Security		Stateless, no session hijacking			Can be hijacked
Usage			Used in APIs & microservices			Used in web apps

Summary:
‚úÖ JWT is used for secure authentication & authorization.
‚úÖ Consists of Header, Payload, and Signature to ensure data integrity.
‚úÖ Generated by the server, stored by the client (stateless authentication).
‚úÖ Used in APIs, microservices, OAuth, and authentication systems.
‚úÖ Tested using Postman to send JWT in API requests.


‚úî SECRET_KEY ‚Üí A secret key used to sign JWTs.
‚úî EXPIRATION_TIME ‚Üí Token will expire after 1 hour.

üìå Real-World Example:

    Think of SECRET_KEY as a private stamp that only the government has.
    This stamp is used to sign passports (JWTs) to prove they are valid.
    Expiry time ensures that passports (JWTs) are valid only for a certain period.


‚úî setSubject(username) ‚Üí Stores the username inside the JWT.
‚úî setIssuedAt(new Date()) ‚Üí Marks the time when JWT was created.
‚úî setExpiration(...) ‚Üí Sets expiration time for the token (current time + 1 hour).
‚úî signWith(...) ‚Üí Signs the JWT with our secret key.
‚úî compact() ‚Üí Generates the final JWT string.

üìå Real-World Example:

    This is like a government issuing a passport to a person.
    It includes the person's name (username), issue date, and expiry date.
    The government signs it (signWith) so that it cannot be forged.
    
    
‚úî Uses the SECRET_KEY to check if the token is valid.
‚úî If the token is modified or expired, it returns false.

üìå Real-World Example:

    Imagine showing your passport at the airport.
    If the passport is genuine (correct signature, not expired), you can board. ‚úÖ
    If the passport is fake or expired, you cannot board. ‚ùå
    
Extracts username stored inside JWT.

üìå Real-World Example:

    This is like scanning a passport barcode to get the person‚Äôs name.
    
    

*/